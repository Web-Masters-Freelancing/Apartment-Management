generator client {
  provider = "prisma-client-js"
}

generator prismaClassGenerator {
  provider      = "prisma-class-generator"
  output        = "./../src/_gen-prisma-classes"
  makeIndexFile = "false"
  dryRun        = "false"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Category {
  id          Int     @id @default(autoincrement())
  name        String  @db.VarChar(100)
  description String  @db.Text
  isArchived  Boolean @default(false)
  Room        Room[]
}

model Auth {
  id           Int      @id @default(autoincrement())
  email        String   @unique(map: "email") @db.VarChar(100)
  password     String   @db.Text
  userId       Int      @unique(map: "Auth_userId_key")
  token        String?  @db.Text
  lastLoggedIn DateTime @default(now()) @db.Timestamp(0)
  user         User     @relation(fields: [userId], references: [id], map: "Auth_userId_fkey")
}

model Billable {
  id        Int             @id @default(autoincrement())
  userId    Int             @unique(map: "Billable_userId_key")
  roomId    Int
  dueDate   DateTime
  deposit   Float?
  amountDue Float
  status    BILLABLE_STATUS @default(ACTIVE)
  startDate DateTime        @default(now()) @db.Timestamp(0)
  room      Room            @relation(fields: [roomId], references: [id], map: "Billable_roomId_fkey")
  user      User            @relation(fields: [userId], references: [id], map: "Billable_userId_fkey")
  payments  Payments[]

  @@index([roomId], map: "Billable_roomId_fkey")
}

model Payments {
  id             Int      @id @default(autoincrement())
  billableId     Int
  paidOn         DateTime
  advancePayment Float    @default(0)
  balance        Float    @default(0)
  amountPaid     Float
  billable       Billable @relation(fields: [billableId], references: [id], map: "Payments_billableId_fkey")

  @@index([billableId], map: "Payments_billableId_fkey")
}

model Room {
  id          Int           @id @default(autoincrement())
  categoryId  Int
  amount      Float
  status      ROOM_STATUS   @default(AVAILABLE)
  isArchived  Boolean       @default(false)
  roomNumber  Int
  billable    Billable[]
  roomhistory RoomHistory[]
  category    Category      @relation(fields: [categoryId], references: [id])

  @@unique([roomNumber])
}

model RoomHistory {
  id         Int      @id @default(autoincrement())
  roomId     Int
  userId     Int      @unique(map: "RoomHistory_userId_key")
  occupiedOn DateTime @default(now()) @db.Timestamp(0)
  room       Room     @relation(fields: [roomId], references: [id], map: "RoomHistory_roomId_fkey")
  user       User     @relation(fields: [userId], references: [id], map: "RoomHistory_userId_fkey")

  @@index([roomId], map: "RoomHistory_roomId_fkey")
}

model User {
  id          Int          @id @default(autoincrement())
  name        String
  contact     String       @db.Text
  address     String       @db.Text
  role        USER_ROLE    @default(TENANT)
  isArchived  Boolean      @default(false)
  createdAt   DateTime     @default(now()) @db.Timestamp(0)
  updatedAt   DateTime     @default(now()) @db.Timestamp(0)
  auth        Auth?
  billable    Billable?
  roomhistory RoomHistory?
  startDate   DateTime?
}

enum ROOM_STATUS {
  AVAILABLE
  NOT_AVAILABLE
  OCCUPIED
}

enum USER_ROLE {
  ADMIN
  TENANT
}

enum BILLABLE_STATUS {
  ACTIVE
  INACTIVE
}
