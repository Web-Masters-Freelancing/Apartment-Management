generator client {
  provider = "prisma-client-js"
}

generator prismaClassGenerator {
  provider      = "prisma-class-generator"
  output        = "./../src/_gen-prisma-classes"
  dryRun        = false
  makeIndexFile = false
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int           @id @default(autoincrement())
  name        String
  email       String        @unique(map: "email") @db.VarChar(250)
  password    String        @db.Text
  contact     String        @db.Text
  address     String        @db.Text
  role        RoleEnum      @default(TENANT)
  createdAt   DateTime      @default(now()) @db.Timestamp(0)
  updatedAt   DateTime      @default(now()) @db.Timestamp(0)
  Auth        Auth?
  Billable    Billable?
  RoomHistory RoomHistory[]
}

model Auth {
  id           Int      @id @default(autoincrement())
  user         User     @relation(fields: [userId], references: [id])
  userId       Int      @unique
  token        String?  @db.Text
  lastLoggedIn DateTime @default(now()) @db.Timestamp(0)
}

model Billable {
  id       Int                @id @default(autoincrement())
  user     User               @relation(fields: [userId], references: [id])
  userId   Int                @unique
  room     Room               @relation(fields: [roomId], references: [id])
  roomId   Int
  dueDate  DateTime           @db.Date
  amount   Float
  status   BillableStatusEnum @default(ACTIVE)
  Payments Payments[]
}

model RoomHistory {
  id         Int      @id @default(autoincrement())
  room       Room     @relation(fields: [roomId], references: [id])
  roomId     Int
  user       User     @relation(fields: [userId], references: [id])
  userId     Int      @unique
  occupiedOn DateTime @default(now()) @db.Timestamp(0)
}

model Room {
  id          Int            @id @default(autoincrement())
  type        String
  description String?        @db.Text
  amount      Float
  status      RoomStatusEnum @default(AVAILABLE)
  Billable    Billable[]
  RoomHistory RoomHistory[]
}

// This will also serve as the payment transaction history
model Payments {
  id            Int      @id @default(autoincrement())
  billable      Billable @relation(fields: [billableId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  billableId    Int
  paidOn        DateTime
  amount        Float
  attachment    String   @db.Text
  monthsCovered String   @db.Text
}

enum RoleEnum {
  ADMIN
  TENANT
}

enum RoomStatusEnum {
  AVAILABLE
  NOT_AVAILABLE
}

enum BillableStatusEnum {
  ACTIVE
  INACTIVE
}
